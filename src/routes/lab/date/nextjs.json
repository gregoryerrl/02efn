{
	"data": [
		{
			"title": "Current Date Basics",
			"explanation": "Getting the current date in NextJS. Learn different date representations and when to use them in React components. Server components can directly use Date without client-side hydration.",
			"code": "export default function DateBasics() {\n  const now = new Date();\n\n  return (\n    <div className=\"space-y-2\">\n      <p>ISO: {now.toISOString()}</p>\n      <p>Local: {now.toLocaleString()}</p>\n      <p>UTC: {now.toUTCString()}</p>\n      <p>Timestamp: {now.getTime()}</p>\n    </div>\n  );\n}",
			"outputs": [
				{
					"label": "ISO",
					"value": "$CURRENT_ISO_DATE"
				},
				{
					"label": "Local",
					"value": "$CURRENT_LOCAL_DATE"
				},
				{
					"label": "UTC",
					"value": "$CURRENT_UTC_DATE"
				},
				{
					"label": "Timestamp",
					"value": "$CURRENT_TIMESTAMP"
				}
			]
		},
		{
			"title": "Date Formatting",
			"explanation": "Formatting dates in NextJS using Intl.DateTimeFormat. This component demonstrates various formatting options:\n\n• Full date and time with weekday\n• Short date format\n• Time-only format with AM/PM\n• Localized format (German)\n\nThe Intl.DateTimeFormat API is fully supported in NextJS for both server and client components.",
			"code": "export default function DateFormats() {\n  const date = new Date();\n\n  // Full date and time\n  const fullFormatter = new Intl.DateTimeFormat('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n\n  // Short date\n  const shortFormatter = new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: '2-digit'\n  });\n\n  // Time only\n  const timeFormatter = new Intl.DateTimeFormat('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true\n  });\n\n  // Different locale (German)\n  const germanFormatter = new Intl.DateTimeFormat('de-DE', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  return (\n    <div className=\"space-y-2\">\n      <p>Full: {fullFormatter.format(date)}</p>\n      <p>Short: {shortFormatter.format(date)}</p>\n      <p>Time: {timeFormatter.format(date)}</p>\n      <p>German: {germanFormatter.format(date)}</p>\n    </div>\n  );\n}",
			"outputs": [
				{
					"label": "Full Format",
					"value": "$CURRENT_FORMATTED_DATE"
				},
				{
					"label": "Short Format",
					"value": "$CURRENT_SHORT_DATE"
				},
				{
					"label": "Time Format",
					"value": "$CURRENT_TIME"
				},
				{
					"label": "German",
					"value": "$CURRENT_GERMAN_DATE"
				}
			]
		},
		{
			"title": "Date Calculations",
			"explanation": "Common date calculations and manipulations in NextJS with React state management.",
			"code": "'use client';\n\nexport default function DateCalculations() {\n  const today = new Date();\n  const nextWeek = new Date(today);\n  nextWeek.setDate(today.getDate() + 7);\n\n  return (\n    <div>\n      <p>Today: {today.toDateString()}</p>\n      <p>Next week: {nextWeek.toDateString()}</p>\n    </div>\n  );\n}",
			"outputs": [
				{
					"label": "Today",
					"value": "$CURRENT_DATE_STRING"
				},
				{
					"label": "Next Week",
					"value": "$NEXT_WEEK_DATE_STRING"
				}
			]
		},
		{
			"title": "Client Timezone Detection",
			"explanation": "Detecting and working with client timezones in NextJS. Important considerations:\n\n• Client-side detection with 'use client'\n• Server vs client timezone handling\n• Automatic timezone detection\n• Business hours across timezones",
			"code": "'use client';\n\nimport { useEffect, useState } from 'react';\n\nexport default function TimezoneDetection() {\n  const [timezone, setTimezone] = useState('');\n  const [offset, setOffset] = useState(0);\n  const [localTime, setLocalTime] = useState('');\n  const [workHours, setWorkHours] = useState('');\n\n  useEffect(() => {\n    // Get client's timezone\n    const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    setTimezone(tz);\n\n    // Get timezone offset\n    const offs = new Date().getTimezoneOffset();\n    setOffset(-offs/60); // Convert to hours and invert (UTC+X format)\n\n    // Format local time\n    const formatter = new Intl.DateTimeFormat(undefined, {\n      timeZone: tz,\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZoneName: 'long'\n    });\n    setLocalTime(formatter.format(new Date()));\n\n    // Calculate business hours\n    const start = new Date().setHours(9, 0, 0, 0);\n    const end = new Date().setHours(17, 0, 0, 0);\n    setWorkHours(\n      `${new Date(start).toLocaleTimeString()} to ${new Date(end).toLocaleTimeString()}`\n    );\n  }, []);\n\n  return (\n    <div className=\"space-y-2\">\n      <p>Your timezone: {timezone}</p>\n      <p>UTC offset: {offset} hours</p>\n      <p>Local time: {localTime}</p>\n      <p>Business hours (local): {workHours}</p>\n    </div>\n  );\n}",
			"outputs": [
				{
					"label": "Timezone",
					"value": "$CLIENT_TIMEZONE"
				},
				{
					"label": "UTC Offset",
					"value": "$CLIENT_UTC_OFFSET hours"
				},
				{
					"label": "Local Time",
					"value": "$CLIENT_LOCAL_TIME"
				},
				{
					"label": "Work Hours",
					"value": "$CLIENT_BUSINESS_HOURS"
				}
			]
		}
	]
}
